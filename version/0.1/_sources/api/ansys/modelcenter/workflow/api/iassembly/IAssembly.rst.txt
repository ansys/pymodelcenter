



IAssembly
=========

.. py:class:: IAssembly
   :canonical: ansys.modelcenter.workflow.api.iassembly.IAssembly



Bases: :py:obj:`ansys.modelcenter.workflow.api.irenamable_elements.IRenamableElement`, :py:obj:`ansys.engineeringworkflow.api.IControlStatement`, :py:obj:`ansys.modelcenter.workflow.api.igroup.IGroupOwner`, :py:obj:`IAssemblyChild`, :py:obj:`abc.ABC`


   Represents a ModelCenter assembly.

   Assemblies organize components and other assemblies in the workflow.
   Additionally, assemblies can have datapins appended to themselves,
   allowing them to act as a way to abstract subordinate parts of the
   model.

   Each ModelCenter workflow has an assembly as its root element,
   containing all other assemblies.















   ..
       !! processed by numpydoc !!















Overview
--------
.. py:currentmodule:: IAssembly
.. tab-set::

    .. tab-item:: Abstract methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~add_assembly`
            - Create a subassembly with a specific type and position.
          * - :py:attr:`~delete_datapin`
            - Delete a given datapin.



    .. tab-item:: Methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~add_datapin`
            - Create a datapin on the assembly.







Import detail
-------------

.. code-block:: python

    from ansys.modelcenter.workflow.api.iassembly import IAssembly




Method detail
-------------
.. py:method:: add_assembly(name: str, av_pos: Optional[Tuple[int, int]] = None, assembly_type: Optional[AssemblyType] = None) -> IAssembly
   :abstractmethod:

   
   Create a subassembly with a specific type and position.


   :Parameters:

       **name** : :class:`python:str`
           Name of the subassembly.

       **av_pos** : :obj:`Tuple`\[int,int], :obj:`optional`
           Position of the subassembly in the parent assembly's analysis view.
           The default is ``None``.

       **assembly_type** : :obj:`AssemblyType`, :obj:`optional`
           Type of assembly to create. The default is ``None``, in which case a
           regular data-dependency assembly is created. (This is the same
           as passing ``AssemblyType.ASSEMBLY``.)

   :Returns:

       :obj:`IAssembly`
           Created assembly object.













   ..
       !! processed by numpydoc !!

.. py:method:: add_datapin(name: str, mc_type: ansys.tools.variableinterop.VariableType) -> ansys.engineeringworkflow.api.IDatapin

   
   Create a datapin on the assembly.


   :Parameters:

       **name** : :class:`python:str`
           Name of the datapin.

       **mc_type: atvi.VariableType**
           Type for the datapin.

   :Returns:

       :obj:`IDatapin`
           Object representing the created datapin.













   ..
       !! processed by numpydoc !!

.. py:method:: delete_datapin(name: str) -> bool
   :abstractmethod:

   
   Delete a given datapin.

   Variable objects that represent the given datapin become invalid.
   If there is no datapin with the given name, no error is raised.

   :Parameters:

       **name** : :class:`python:str`
           Name of the datapin.

   :Returns:

       :ref:`bool <python:bltin-boolean-values>`
           ``True`` if the given datapin was located and deleted,
           ``False`` if it was not and no action was taken.













   ..
       !! processed by numpydoc !!


