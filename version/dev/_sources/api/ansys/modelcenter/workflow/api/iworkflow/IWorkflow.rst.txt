



IWorkflow
=========

.. py:class:: IWorkflow
   :canonical: ansys.modelcenter.workflow.api.iworkflow.IWorkflow



Bases: :py:obj:`ansys.engineeringworkflow.api.IWorkflowInstance`, :py:obj:`abc.ABC`


   Represents a ModelCenter workflow.
















   ..
       !! processed by numpydoc !!






























Overview
--------
.. py:currentmodule:: IWorkflow
.. tab-set::

    .. tab-item:: Abstract methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~set_value`
            - Set the value of a datapin.
          * - :py:attr:`~get_datapin_state`
            - Get the state of a datapin.
          * - :py:attr:`~get_datapin_meta_data`
            - Get the metadata from a datapin.
          * - :py:attr:`~create_link`
            - Create a link to a given datapin based on a given equation.
          * - :py:attr:`~save_workflow`
            - Save the workflow.
          * - :py:attr:`~save_workflow_as`
            - Save the workflow to a file.
          * - :py:attr:`~close_workflow`
            - Close the workflow.
          * - :py:attr:`~get_datapin`
            - Get a datapin with a given name.
          * - :py:attr:`~get_component`
            - Get a component from the workflow.
          * - :py:attr:`~remove_component`
            - Remove a component from the workflow.
          * - :py:attr:`~create_assembly`
            - Create an assembly in the workflow.
          * - :py:attr:`~auto_link`
            - Automatically link two components.
          * - :py:attr:`~get_links`
            - Get a list of all links in the workflow.
          * - :py:attr:`~get_workflow_uuid`
            - Get the unique ID for the workflow.
          * - :py:attr:`~halt`
            - Stop execution of the workflow in ModelCenter.
          * - :py:attr:`~move_component`
            - Move a component to the parent at the given index.
          * - :py:attr:`~get_assembly`
            - Get the named assembly or the top-level assembly.
          * - :py:attr:`~create_component`
            - Create a component.




    .. tab-item:: Properties

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~workflow_file_name`
            - Full path of the workflow.






Import detail
-------------

.. code-block:: python

    from ansys.modelcenter.workflow.api.iworkflow import IWorkflow


Property detail
---------------
.. py:property:: workflow_file_name
   :canonical: ansys.modelcenter.workflow.api.iworkflow.IWorkflow.workflow_file_name
   :type: str

   :abstractmethod:

   
   Full path of the workflow.
















   ..
       !! processed by numpydoc !!




Method detail
-------------
.. py:method:: set_value(var_name: str, value: ansys.tools.variableinterop.IVariableValue) -> None
   :abstractmethod:


   
   Set the value of a datapin.


   :Parameters:

       **var_name** : :class:`python:str`
           Full ModelCenter path of the datapin.

       **value** : :obj:`atvi.IVariableValue`
           New value to set.





   :Raises:

       :obj:`InvalidInstanceError`
           If a datapin with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: get_datapin_state(var_name: str) -> ansys.tools.variableinterop.VariableState
   :abstractmethod:


   
   Get the state of a datapin.


   :Parameters:

       **var_name** :  :class:`python:str`
           Full ModelCenter path of the datapin.

   :Returns:

       :obj:`VariableState`
           Value as a ``VariableState``.




   :Raises:

       :obj:`InvalidInstanceError`
           If a datapin with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: get_datapin_meta_data(name: str) -> ansys.tools.variableinterop.CommonVariableMetadata
   :abstractmethod:


   
   Get the metadata from a datapin.


   :Parameters:

       **name** : :class:`python:str`
           Full name of the datapin.

   :Returns:

       :obj:`atvi.CommonVariableMetadata`
           Metadata of the datapin.




   :Raises:

       :obj:`InvalidInstanceError`
           If a datapin with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: create_link(datapin: Union[ansys.modelcenter.workflow.api.idatapin.IDatapin, str], equation: Union[str, ansys.modelcenter.workflow.api.idatapin.IDatapin]) -> None
   :abstractmethod:


   
   Create a link to a given datapin based on a given equation.


   :Parameters:

       **datapin** : :obj:`Union`\[:obj:`IDatapin`, :class:`python:str`]
           Datapin that the link should target or its full name.

       **equation** : :obj:`Union`\[:class:`python:str`, :obj:`IDatapin`]
           Equation of the link. You can also pass an ``IDatapin``
           object here, and its name becomes the equation.





   :Raises:

       :obj:`InvalidInstanceError`
           If either the target or equation datapin does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: save_workflow() -> None
   :abstractmethod:


   
   Save the workflow.
















   ..
       !! processed by numpydoc !!

.. py:method:: save_workflow_as(file_name: str) -> None
   :abstractmethod:


   
   Save the workflow to a file.


   :Parameters:

       **file_name** : :class:`python:str`
           Path to save the workflow in.














   ..
       !! processed by numpydoc !!

.. py:method:: close_workflow() -> None
   :abstractmethod:


   
   Close the workflow.
















   ..
       !! processed by numpydoc !!

.. py:method:: get_datapin(name: str) -> ansys.modelcenter.workflow.api.idatapin.IDatapin
   :abstractmethod:


   
   Get a datapin with a given name.


   :Parameters:

       **name** : :class:`python:str`
           Full ModelCenter path of the datapin.

   :Returns:

       :obj:`IDatapin`
           Datapin with the given name.




   :Raises:

       :obj:`InvalidInstanceError`
           If a datapin with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: get_component(name: str) -> ansys.modelcenter.workflow.api.icomponent.IComponent
   :abstractmethod:


   
   Get a component from the workflow.


   :Parameters:

       **name** : :class:`python:str`
           Full path and file name to the component.

   :Returns:

       :obj:`IComponent`
           Component with the given name.




   :Raises:

       :obj:`InvalidInstanceError`
           If a component with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: remove_component(name: str) -> None
   :abstractmethod:


   
   Remove a component from the workflow.


   :Parameters:

       **name** : :class:`python:str`
           Full ModelCenter path of the component.





   :Raises:

       :obj:`InvalidInstanceError`
           If a component with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: create_assembly(name: str, parent: Union[ansys.modelcenter.workflow.api.iassembly.IAssembly, str], assembly_type: Optional[ansys.modelcenter.workflow.api.iassembly.AssemblyType] = None) -> ansys.modelcenter.workflow.api.iassembly.IAssembly
   :abstractmethod:


   
   Create an assembly in the workflow.


   :Parameters:

       **name** : :class:`python:str`
           Name of the new assembly.

       **parent** : :obj:`Union`\[:obj:`IAssembly`, :class:`python:str`]
           Full ModelCenter path of the parent ``IAssembly`` object or an
           ``IAssembly`` object that represents it.

       **assembly_type** : :obj:`AssemblyType`, :obj:`optional`
           Type of the assembly to create. Pass ``None`` to create a
           regular data-dependency assembly. (This is equivalent to passing
           ``AssemblyType.ASSEMBLY``.)

   :Returns:

       :obj:`IAssembly`
           Created assembly.













   ..
       !! processed by numpydoc !!

.. py:method:: auto_link(src_comp: Union[ansys.modelcenter.workflow.api.icomponent.IComponent, str], dest_comp: Union[ansys.modelcenter.workflow.api.icomponent.IComponent, str]) -> Collection[ansys.modelcenter.workflow.api.idatapin_link.IDatapinLink]
   :abstractmethod:


   
   Automatically link two components.


   :Parameters:

       **src_comp** : :class:`python:str`
           Source component or the full name of the component desired.

       **dest_comp** : :class:`python:str`
           Destination component or the full name of the component desired.

   :Returns:

       :obj:`Collection`\[:obj:`IDatapinLink`]
           Collection of the created links.




   :Raises:

       :obj:`InvalidInstanceError`
           If either the source or destination component does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: get_links() -> Collection[ansys.modelcenter.workflow.api.idatapin_link.IDatapinLink]
   :abstractmethod:


   
   Get a list of all links in the workflow.



   :Returns:

       :obj:`Collection`\[:obj:`IDatapinLink`]
           Iterable over datapin links.













   ..
       !! processed by numpydoc !!

.. py:method:: get_workflow_uuid() -> str
   :abstractmethod:


   
   Get the unique ID for the workflow.
















   ..
       !! processed by numpydoc !!

.. py:method:: halt() -> None
   :abstractmethod:


   
   Stop execution of the workflow in ModelCenter.
















   ..
       !! processed by numpydoc !!

.. py:method:: move_component(component: Union[ansys.modelcenter.workflow.api.icomponent.IComponent, str], parent: Union[ansys.engineeringworkflow.api.IControlStatement, str], index: int = -1) -> None
   :abstractmethod:


   
   Move a component to the parent at the given index.


   :Parameters:

       **component** : :obj:`Union`\[:obj:`IComponent`, :class:`python:str`]
           Component to move.

       **parent** : :class:`python:str`
           Owning object of the component.

       **index** : :class:`python:int`, :obj:`optional`
           Position in the parent.





   :Raises:

       :obj:`InvalidInstanceError`
           If the target component does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: get_assembly(name: Optional[str] = None) -> ansys.modelcenter.workflow.api.iassembly.IAssembly
   :abstractmethod:


   
   Get the named assembly or the top-level assembly.


   :Parameters:

       **name** : :class:`python:str`, :obj:`optional`
           Full name of the desired assembly.
           If ``None`` is passed, the root assembly of the workflow is
           returned.





   :Raises:

       :obj:`InvalidInstanceError`
           If an assembly with the given name does not exist.









   ..
       !! processed by numpydoc !!

.. py:method:: create_component(server_path: str, name: str, parent: Union[ansys.engineeringworkflow.api.IControlStatement, str], *, init_string: Optional[str] = None, av_position: Optional[Tuple[int, int]] = None, insert_before: Optional[Union[ansys.modelcenter.workflow.api.icomponent.IComponent, ansys.modelcenter.workflow.api.iassembly.IAssembly, str]] = None) -> ansys.modelcenter.workflow.api.icomponent.IComponent
   :abstractmethod:


   
   Create a component.


   :Parameters:

       **server_path** : :class:`python:str`
           Source path of the new component, such as the URL to the
           component in ModelCenter Remote Execution.

       **name** : :class:`python:str`
           Name of the new component.

       **parent** : :obj:`Union`\[:obj:`aew_api.IControlStatement`, :class:`python:str`]
           Parent assembly of the component.

       **init_string: str, optional**
           Initialization string.

       **av_position: Tuple[int, int], optional**
           Position in the analysis view to insert the component at.

       **insert_before: Union[IComponent, IAssembly, str], optional**
           Component before where this component is to be inserted.

       **Returns**
           ..

       **-------**
           ..

       **IComponent**
           Created component.














   ..
       !! processed by numpydoc !!


