# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'ansys-modelcenter-workflow'
  PACKAGE_NAMESPACE: 'ansys.modelcenter.workflow'
  DOCUMENTATION_CNAME: 'modelcenter.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "2.29.5"


  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        # Only perform wheelhouse builds for Windows and macOS when releasing
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
          - should-release: false
            os: windows-latest
    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}


  build-tests:
    needs: [smoke-tests]
    name: "Build and unit testing"
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_EXTRA_ARGS: "-v --cov=ansys.modelcenter.workflow --cov-report=term --cov-report=html:.cov/html"
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        os: ['windows-latest']
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: "Create Python venv"
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: "Install package and testing dependencies"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install .[tests]

      - name: "Testing"
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest ${{ env.PYTEST_EXTRA_ARGS }}

      - name: "Upload coverage results as artifacts"
        uses: actions/upload-artifact@v4
        if: matrix.python-version == env.MAIN_PYTHON_VERSION
        with:
          name: HTML-Coverage
          path: .cov/html
          retention-days: 7


  doc-build:
    name: "Documentation building"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  package:
    name: Package library
    needs: [build-tests, doc-build]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v5
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    # Deploy development only when merging to main
    if: github.ref == 'refs/heads/main'
    needs: [package]
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v5
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}


  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package]
    runs-on: windows-latest
    steps:
    - name: "Release to the public PyPI repository"
      uses: ansys/actions/release-pypi-public@v4
      with:
        library-name: ${{ env.PACKAGE_NAME }}
        twine-username: "__token__"
        twine-token: ${{ secrets.PYPI_TOKEN }}

    - name: "Release to GitHub"
      uses: ansys/actions/release-github@v4
      with:
        library-name: ${{ env.PACKAGE_NAME }}


  doc-deploy-stable:
    name: "Deploy stable documentation"
    # Deploy release documentation when creating a new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v4
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}