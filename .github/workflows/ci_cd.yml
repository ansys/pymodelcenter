# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'ansys-modelcenter-workflow'
  PACKAGE_NAMESPACE: 'ansys.modelcenter.workflow'
  DOCUMENTATION_CNAME: 'modelcenter.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "2.29.5"

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        # Only perform wheelhouse builds for Windows and macOS when releasing
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
          - should-release: false
            os: windows-latest
    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  build-tests:
    needs: [smoke-tests]
    name: "Build and Testing"
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_EXTRA_ARGS: "--cov=ansys.modelcenter.workflow --cov-report=term --cov-report=html:.cov/html"
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        os: ['windows-latest']
    steps:
      - name: "Set up git credentials"
        run: |
          git config --global url.https://${{ secrets.PHX_NIGHTLY_SECRET }}@github.com/ansys/pyansys-tools-variableinterop.insteadOf https://github.com/ansys/pyansys-tools-variableinterop
          git config --global url.https://${{ secrets.PHX_NIGHTLY_SECRET }}@github.com/ansys/ansys-engineeringworkflow-api.insteadOf https://github.com/ansys/ansys-engineeringworkflow-api

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.PHX_NIGHTLY_SECRET }}

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Get dependencies"
        run: pip install .[dev]

      - name: "Run pytest"
        uses: ansys/actions/tests-pytest@v4.1
        with:
          python-version: ${{ matrix.python-version }}
          pytest-extra-args: ${{ env.PYTEST_EXTRA_ARGS }}
          checkout: false

      - name: "Upload coverage results as artifacts"
        uses: actions/upload-artifact@v3
        if: matrix.python-version == env.MAIN_PYTHON_VERSION
        with:
          name: HTML-Coverage
          path: .cov/html
          retention-days: 7

  doc-build:
    name: "Build Documentation"
    runs-on: windows-latest
    needs: [doc-style]
    steps:
      - name: "Set up git credentials"
        run: |
          git config --global url.https://${{ secrets.PHX_NIGHTLY_SECRET }}@github.com/ansys/pyansys-tools-variableinterop.insteadOf https://github.com/ansys/pyansys-tools-variableinterop
          git config --global url.https://${{ secrets.PHX_NIGHTLY_SECRET }}@github.com/ansys/ansys-engineeringworkflow-api.insteadOf https://github.com/ansys/ansys-engineeringworkflow-api

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.PHX_NIGHTLY_SECRET }}

      - name: "Set up Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install library, with docs extra"
        run: |
          pip install .[docs]

      - name: "Build HTML"
        run: doc/make.bat html

#      - name: Build PDF Documentation
#        run: |
#          sudo apt update
#          sudo apt-get install -y texlive-latex-extra latexmk
#          poetry run make -C doc latexpdf

      - name: "Upload HTML Documentation"
        uses: actions/upload-artifact@v3
        with:
          name: Documentation-html
          path: doc/build/html
          retention-days: 7

#      - name: "Upload PDF Documentation"
#        uses: actions/upload-artifact@v2
#        with:
#          name: Documentation-pdf
#          path: doc/build/latex/*.pdf
#          retention-days: 7

  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    # Deploy development only when merging to main
    if: github.ref == 'refs/heads/main'
    needs: [doc-build]
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          doc-artifact-name: Documentation-html

  release:
    if: contains(github.ref, 'refs/tags')
    needs: [build-tests, doc-deploy-dev]
    runs-on: windows-latest
    steps:
      - name: "Set up Python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/download-artifact@v2
        with:
          name: ansys-modelcenter-workflow-wheel

#      - uses: actions/download-artifact@v2
#        with:
#          name: Documentation-pdf

      - uses: actions/download-artifact@v2
        with:
          name: Documentation-html
          path: ~/html

      # list current directory
      - name: "List directory structure"
        run: ls -R

      - name: "Deploy"
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          BRANCH: gh-pages
          FOLDER: ~/html
          CLEAN: true

      # note how we use the PyPI tokens
      - name: "Upload to Azure PyPi (disabled)"
        run: |
          pip install twine
          # twine upload --skip-existing ./**/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: "Release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/*.pdf
